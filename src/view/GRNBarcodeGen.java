/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import connection.DBConnection;
import controller.Controller;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import model.BracodePrint;
import model.ImgModel;
import net.sf.jasperreports.engine.JRException;
import org.apache.avalon.framework.configuration.ConfigurationException;
import org.krysalis.barcode4j.BarcodeException;

/**
 *
 * @author Kalum
 */
public class GRNBarcodeGen extends javax.swing.JPanel {

    private String grnrefNo;
    private Connection connection;
    private final DefaultTableModel model1;
    private final DefaultTableModel model2;
    private ArrayList<BracodePrint> barprintList = new ArrayList<BracodePrint>();

    /**
     * Creates new form GRNBarcodeGen
     */
    public GRNBarcodeGen() {
        initComponents();
        try {
            connection = DBConnection.getDBConnection().getConnection();
        } catch (SQLException ex) {
            Logger.getLogger(GRNBarcodegenn.class.getName()).log(Level.SEVERE, null, ex);
        }
        model1 = (DefaultTableModel) table2.getModel();
        model2 = (DefaultTableModel) grnTable.getModel();
        getResNo();
    }

    public void getResNo() {
        try {

            String sql = "select BarcodePrint.RECNO from BarcodePrint group by BarcodePrint.RECNO";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();

            model2.setRowCount(0);
            while (resultSet.next()) {
                Object[] rowdata = {
                    resultSet.getString(1)
                };
                model2.addRow(rowdata);
            }
        } catch (SQLException ex) {
            Logger.getLogger(GRNBarcodegenn.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void getAllDetail() {
        try {

            String sql = "select * from BarcodePrint";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();
            model1.setRowCount(0);
            while (resultSet.next()) {
                Object[] rowdata = {
                    resultSet.getInt(2),
                    resultSet.getString(6),
                    resultSet.getFloat(7),
                    resultSet.getInt(4)
                };
                model1.addRow(rowdata);
            }
        } catch (SQLException ex) {
            Logger.getLogger(GRNBarcodegenn.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        grnTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setLayout(null);

        grnTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GRN Ref"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        grnTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                grnTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(grnTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(32, 26, 123, 286);

        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product No", "Barcode", "Desc", "Price", "Qty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table2);

        add(jScrollPane2);
        jScrollPane2.setBounds(161, 26, 452, 286);

        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(420, 323, 130, 50);
    }// </editor-fold>//GEN-END:initComponents

    private void grnTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grnTableMouseClicked
        Integer selecRow = grnTable.getSelectedRow();
        grnrefNo = (String) model2.getValueAt(selecRow, 0);
        try {
            String sql = "select * from BarcodePrint where RECNO='" + grnrefNo + "'";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();
            model1.setRowCount(0);
            while (resultSet.next()) {
                BracodePrint bracodePrint = new BracodePrint();
                bracodePrint.setRecNo(resultSet.getString(1));
                bracodePrint.setBarcodePrint(resultSet.getInt(2));
                bracodePrint.setProNo(resultSet.getString(3));
                bracodePrint.setBcQty(resultSet.getInt(4));
                bracodePrint.setBarCode(resultSet.getString(5));
                bracodePrint.setBcDes(resultSet.getString(6));
                bracodePrint.setPrice(resultSet.getFloat(7));
                barprintList.add(bracodePrint);
                Object[] rowdata = {
                    resultSet.getString(3),
                    resultSet.getInt(2),
                    resultSet.getString(6),
                    resultSet.getFloat(7),
                    resultSet.getInt(4)
                };
                model1.addRow(rowdata);

            }
        } catch (SQLException ex) {
            Logger.getLogger(GRNBarcodegenn.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_grnTableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Controller controller = new Controller();
        ImgModel imgModel = new ImgModel();

        try {
            ArrayList<BracodePrint> allBarcodeDataByGrnRefNo = controller.getAllBarcodeDataByGrnRefNo(grnrefNo);

            controller.deleteOldData();
            for (BracodePrint bracodePrint1 : allBarcodeDataByGrnRefNo) {
                imgModel.setBarcode(bracodePrint1.getBarCode());
                imgModel.setCost(bracodePrint1.getPrice());
                imgModel.setBcdesc(bracodePrint1.getBcDes());
                imgModel.setPrintQty(bracodePrint1.getBcQty());
                imgModel.setProNo(bracodePrint1.getProNo());
                System.out.println("createBarcode");
//                controller.createBarcode(bracodePrint1.getBarCode());
                System.out.println("saveBarcode");
                controller.saveAllBarcode(imgModel);
            }
            System.out.println("viewBarcode");
            controller.viewJasperReport();
        } catch (SQLException | JRException ex) {
            Logger.getLogger(QuickBarCodeGenn.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void table2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table2MouseClicked
        Integer selectRow = table2.getSelectedRow();
        ImgModel imgModel = new ImgModel();
        imgModel.setProNo((String) model1.getValueAt(selectRow, 0));

//        String barcode = (String) model1.getValueAt(selectRow, 0);
//        String desc = (String) model1.getValueAt(selectRow, 1);
//        String price = (String) model1.getValueAt(selectRow, 2);
//        Integer qty = (Integer) model1.getValueAt(selectRow, 3);
        QuickBarCodeGenn barCodeGenn = new QuickBarCodeGenn(null, true, imgModel);
        barCodeGenn.setFocusable(true);
        barCodeGenn.setVisible(true);

    }//GEN-LAST:event_table2MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable grnTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable table2;
    // End of variables declaration//GEN-END:variables
}
