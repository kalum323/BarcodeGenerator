/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import connection.DBConnection;
import controller.Controller;
import java.awt.List;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import model.BracodePrint;
import model.ImgModel;
import net.sf.jasperreports.engine.JRException;
import org.apache.avalon.framework.configuration.ConfigurationException;
import org.krysalis.barcode4j.BarcodeException;

/**
 *
 * @author Kalum
 */
public class GRNBarcodegenn extends java.awt.Dialog {

    Connection connection;
    private final DefaultTableModel model1;
    private final DefaultTableModel model2;
    ArrayList<BracodePrint> barprintList = new ArrayList<BracodePrint>();

    /**
     * Creates new form GRNBarcodegen
     */
    public GRNBarcodegenn(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        try {
            connection = DBConnection.getDBConnection().getConnection();
        } catch (SQLException ex) {
            Logger.getLogger(GRNBarcodegenn.class.getName()).log(Level.SEVERE, null, ex);
        }
        setLocationRelativeTo(parent);
        setResizable(false);
        model1 = (DefaultTableModel) table2.getModel();
        model2 = (DefaultTableModel) grnTable.getModel();
        getResNo();
    }

    public void getResNo() {
        try {

            String sql = "select BarcodePrint.RECNO from BarcodePrint group by BarcodePrint.RECNO";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();
            ArrayList<BracodePrint> barprintList = new ArrayList<BracodePrint>();
            model2.setRowCount(0);
            while (resultSet.next()) {
                Object[] rowdata = {
                    resultSet.getString(1)
                };
                model2.addRow(rowdata);
            }
        } catch (SQLException ex) {
            Logger.getLogger(GRNBarcodegenn.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void getAllDetail() {
        try {

            String sql = "select * from BarcodePrint";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();
            model1.setRowCount(0);
            while (resultSet.next()) {
                Object[] rowdata = {
                    resultSet.getInt(2),
                    resultSet.getString(6),
                    resultSet.getFloat(7),
                    resultSet.getInt(4)
                };
                model1.addRow(rowdata);
            }
        } catch (SQLException ex) {
            Logger.getLogger(GRNBarcodegenn.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        grnTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(251, 251, 251));

        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Barcode", "Desc", "Price", "Qty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(table2);

        grnTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GRN Ref"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        grnTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                grnTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(grnTable);

        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(73, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Controller controller = new Controller();
        ImgModel imgModel = new ImgModel();
        try {
            for (BracodePrint bracodePrint1 : barprintList) {
                
                imgModel.setBarcode(bracodePrint1.getBarCode());
                imgModel.setCost(bracodePrint1.getPrice());
                imgModel.setBcdesc(bracodePrint1.getBcDes());
                imgModel.setPrintQty(bracodePrint1.getBcQty());
                imgModel.setProNo(bracodePrint1.getProNo());
                
//                System.out.println("createBarcode");
//                controller.createBarcode(bracodePrint1.getBarCode());
                System.out.println("saveBarcode");
                controller.saveBarcode(imgModel);
                System.out.println("viewBarcode");
                controller.viewJasperReport();
            }
        } catch (SQLException | JRException ex) {
            Logger.getLogger(QuickBarCodeGenn.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void grnTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grnTableMouseClicked
        Integer selecRow = grnTable.getSelectedRow();
        String recNo = (String) model2.getValueAt(selecRow, 0);
        try {
            String sql = "select * from BarcodePrint where RECNO='" + recNo + "'";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();
            model1.setRowCount(0);
            while (resultSet.next()) {
                BracodePrint bracodePrint = new BracodePrint();
                bracodePrint.setRecNo(resultSet.getString(1));
                bracodePrint.setBarcodePrint(resultSet.getInt(2));
                bracodePrint.setProNo(resultSet.getString(3));
                bracodePrint.setBcQty(resultSet.getInt(4));
                bracodePrint.setBarCode(resultSet.getString(5));
                bracodePrint.setBcDes(resultSet.getString(6));
                bracodePrint.setPrice(resultSet.getFloat(7));
                barprintList.add(bracodePrint);
                Object[] rowdata = {
                    resultSet.getInt(2),
                    resultSet.getString(6),
                    resultSet.getFloat(7),
                    resultSet.getInt(4)
                };
                model1.addRow(rowdata);

            }
        } catch (SQLException ex) {
            Logger.getLogger(GRNBarcodegenn.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_grnTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GRNBarcodegenn dialog = new GRNBarcodegenn(new java.awt.Frame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable grnTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable table2;
    // End of variables declaration//GEN-END:variables
}
